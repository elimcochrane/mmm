library(ggplot2)
library(dplyr)
help("diamonds")
head(diamonds)
diamonds2 <- diamonds %>% dplyr::sample_n(size = 1500, replace = F)
library(ggplot2)
library(dplyr)
help("diamonds")
head(diamonds)
diamonds <- diamonds %>% dplyr::sample_n(size = 1500, replace = F)
ggplot(data = diamonds, mpaping = aes(x = cut)) + geom_bar()
ggplot(data = diamonds, mapping = aes(x = cut)) + geom_bar()
ggplot(data = diamonds, mapping = aes(x = cut)) + geom_bar()
diamonds_summary <- diamonds %>% group_by(cut) %>%   summarize(mean_price = mean(price, na.rm = TRUE))
ggplot(data = diamonds_summary, aes(x = cut, y = mean_price)) + geom_bar(stat = "identity") # ggplot uses the values directly.
View(diamonds_summary)
ggplot(data = diamonds, mapping = aes(x = cut, fill = clarity)) + geom_bar()
# above added fill = clarity
# make sure to use + at the end of each function
ggplot(data = diamonds, mapping = aes(x = cut, fill = clarity)) + geom_bar(position = "fill")  # specify position argument to geom_bar()
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity), position = "dodge")  # specify dodge argument to geom_bar()
ggplot(data = diamonds, mapping = aes(x = cut, fill = clarity)) + geom_bar(position = "dodge") + scale_fill_brewer(palette = "Blues") + labs( title = "Distribution of Diamond Cuts by Clarity", subtitle = "Data from the diamonds dataset", x = "Diamond Cut", y = "Count", fill = "Clarity" ) + theme_minimal() + theme( plot.title = element_text(face = "bold", size = 18, hjust = 0.5), plot.subtitle = element_text(size = 14, hjust = 0.5, color = "gray40"), ) axis.text.x = element_text(angle = 0, hjust = 0.5),  axis.title.x = element_text(margin = margin(t = 15)),  # Moves x-axis label downward axis.title.y = element_text(margin = margin(r = 15)),  # Moves y-axis label to the left)
ggplot(data = diamonds, aes(x = carat, y = price)) +  # Sets up aesthetic mapping geom_point() + # adds points to the plot geom_smooth(method = "lm")    adds # Adds a linear trendline
ggplot(data = diamonds, aes(x = clarity, y = price)) + geom_boxplot() + labs( title = "Distribution of Diamond Prices by Clarity", x = "Clarity", y = "Price (USD)" ) + theme_minimal()
ggplot(data = diamonds, aes(x = clarity, y = price)) + geom_boxplot() + labs( title = "Distribution of Diamond Prices by Clarity", x = "Clarity", y = "Price (USD)" ) + theme_minimal()
library(ggplot2) ggplot(data = diamonds, aes(x = clarity, y = price, color = clarity)) + geom_boxplot() +  scale_color_viridis_d() +   # Use the same custom color scale as the scatter plot labs( title = "Distribution of Diamond Prices by Clarity", subtitle = "Colored by Clarity", x = "Clarity", y = "Price (USD)", color = "Clarity" ) + theme_minimal() + theme( plot.title = element_text(face = "bold", size = 18, hjust = 0.5), plot.subtitle = element_text(size = 14, hjust = 0.5, color = "gray40"), axis.text.x = element_text(angle = 0, hjust = 0.5),  axis.title.x = element_text(margin = margin(t = 15)),  # Moves x-axis label downward axis.title.y = element_text(margin = margin(r = 15)),  # Moves y-axis label to the left legend.position = "none" # removes the legend )
ggplot(data = diamonds, aes(x = clarity, y = price, color = clarity)) + geom_boxplot() +  scale_color_viridis_d() +   # Use the same custom color scale as the scatter plot labs( title = "Distribution of Diamond Prices by Clarity", subtitle = "Colored by Clarity", x = "Clarity", y = "Price (USD)", color = "Clarity" ) + theme_minimal() + theme( plot.title = element_text(face = "bold", size = 18, hjust = 0.5), plot.subtitle = element_text(size = 14, hjust = 0.5, color = "gray40"), axis.text.x = element_text(angle = 0, hjust = 0.5),  axis.title.x = element_text(margin = margin(t = 15)),  # Moves x-axis label downward axis.title.y = element_text(margin = margin(r = 15)),  # Moves y-axis label to the left legend.position = "none" # removes the legend )
j
ggplot(data = diamonds, aes(x = clarity, y = price, color = clarity)) + geom_boxplot() +  scale_color_viridis_d() +   # Use the same custom color scale as the scatter plot labs( title = "Distribution of Diamond Prices by Clarity", subtitle = "Colored by Clarity", x = "Clarity", y = "Price (USD)", color = "Clarity" ) + theme_minimal() + theme( plot.title = element_text(face = "bold", size = 18, hjust = 0.5), plot.subtitle = element_text(size = 14, hjust = 0.5, color = "gray40"), axis.text.x = element_text(angle = 0, hjust = 0.5),  axis.title.x = element_text(margin = margin(t = 15)),  # Moves x-axis label downward axis.title.y = element_text(margin = margin(r = 15)),  # Moves y-axis label to the left legend.position = "none" # removes the legend )
j
install.packages("gapminder")
install.packages("dplyr")
install.packages("tidyverse")
install.packages("ggplot2")
library(gapminder)
library(dplyr)
library(ggplot2)
library(tidyverse)
attach(gapminder)
summary(gapminder)
install.packages("dplyr")
unique(year)
summary(gapminder)
length(unique(year))
sd(gdpPercap)
var(pop)
hist(lifeExp)
hist(log(pop))
boxplot(lifeExp ~ continent)
boxplot(lifeExp ~ continent)
plot(lifeExp ~ gdpPercap)
plot(lifeExp ~ log(gdpPercap))
gapminder %>%
gapminder %>%
filter (gdpPercap < 50000) %>%
ggplot(aes(x=log(gdpPercap), y=lifeExp, size=pop, color=continent))+
geom_point(alpha=.5)
gapminder %>%
filter (gdpPercap < 50000) %>%
ggplot(aes(x = log(gdpPercap), y = lifeExp, size = log(pop), color = continent))+
geom_point(alpha = .5)
lm(lifeExp - gdpPercap)
lm1 <- lm(lifeExp ~ gdpPercap)
lm(lifeExp - gdpPercap)
lm1 <- lm(lifeExp ~ gdpPercap)
summary(lm1)
gapminder %>%
ggplot(aes(x = log(gdpPercap), y = lifeExp))+
geom_point(alpha = .5)+
geom_smooth(method = lm)
gapminder %>%
ggplot(aes(x = log(gdpPercap), y = lifeExp))+
geom_point(alpha = .5)+
geom_smooth(method = lm)
starwars
starwars
dfsw <- starwars %>%
select(sex, height) %>%
filter(sex %in% c('male', 'female')) %>%
drop_na(height)
View(dfsw)
dfsw %>%
group_by(sex) %>%
summarize(average_height = mean(height))
dfsw %>%
group_by(sex) %>%
summarize(average_height = mean(height))
t.test(height ~ sex, data = dfsw)
dfcovid <- read.csv("https://github.com/nytimes/covid-19-data/raw/refs/heads/master/us-counties-2023.csv")
apples
print apples
apples <- 3
apples
install.packages("readxl")
read_excel("peterson_2017-2019.xlsx", sheet = "data")
setwd("C:\Users\elise\Dropbox\Research\results")
setwd("C:/Users/elise/Dropbox/Research/results")
read_excel("peterson_2017-2019.xlsx", sheet = "data")
setwd("C:/Users/elise/Dropbox/Research/results/results_2017-2019")
read_excel("peterson_2017-2019.xlsx", sheet = "data")
